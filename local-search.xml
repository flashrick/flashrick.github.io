<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Subtitle 21 Merge Two Sorted Lists</title>
    <link href="/2023/04/20/Subtitle-21-Merge-Two-Sorted-Lists/"/>
    <url>/2023/04/20/Subtitle-21-Merge-Two-Sorted-Lists/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">leetcode</a></p><p><a href="https://www.youtube.com/watch?v=XIdigk956u0">youtube</a></p><p>hey guys it’s me again and let’s solve</p><p>another leak code problem</p><p>merge two sorted lists so this is an</p><p>easy problem</p><p>it’s a mainly fundamental problem</p><p>there’s nothing crazy about it but it’s</p><p>a pretty good problem to understand some</p><p>basic stuff so</p><p>we’re given two linked lists right so</p><p>this is the first one</p><p>this is the second one both of them are</p><p>already sorted and we just want to merge</p><p>them</p><p>into an output linked list the only</p><p>catch</p><p>is that we have to use the original</p><p>nodes right like we can’t create copies</p><p>of the nodes so let’s say we have</p><p>list one and we have list two i’m just</p><p>going to take them exactly from the</p><p>example that they gave us</p><p>so we can actually focus on the general</p><p>algorithm itself</p><p>so your intuition will probably solve</p><p>this problem for you so</p><p>it’s basically since the lists are</p><p>sorted we start at the beginning of both</p><p>of them right</p><p>now we can just compare the values so</p><p>they’re both</p><p>one so it doesn’t really matter which</p><p>one we pick</p><p>so we can just take uh i’ll say list one</p><p>right so we’ll take</p><p>this one and insert it in our output and</p><p>then move to the next one</p><p>and then just continue the algorithm the</p><p>only catch here is that right now our</p><p>output list</p><p>is empty right so this kind of gives us</p><p>an edge case because our we don’t even</p><p>have a list itself yet so</p><p>what i like to do is just create like a</p><p>dummy node so</p><p>this is a pretty common technique and</p><p>you avoid</p><p>any edge cases you avoid the edge case</p><p>of the initial empty list</p><p>so let’s say we start out with a list</p><p>right this is a dummy node it can have</p><p>any possible value so now we’re going to</p><p>insert one</p><p>into our list now we’re going to compare</p><p>two values</p><p>of two and one in this case the value</p><p>from list two is smaller so we’re gonna</p><p>take it</p><p>insert it into our output list one now</p><p>we’re gonna be comparing these two</p><p>so two and three the value from list one</p><p>is smaller</p><p>we take it and insert it into our output</p><p>two and then of course we can move to</p><p>the last value in list one so now we’re</p><p>at</p><p>four and three which one of them is</p><p>smaller</p><p>of course three which is the value in</p><p>list</p><p>two i’m running out of space</p><p>but i think you get the idea at this</p><p>point so now we’re at the two last</p><p>values from each list</p><p>we’ll just take the value from list one</p><p>and add it</p><p>which is four they’re both the same so</p><p>it doesn’t matter now this is the last</p><p>edge case that we have to worry about so</p><p>now</p><p>for list one there aren’t any more</p><p>values left right so we can’t really</p><p>continue our algorithm lucky for us</p><p>there’s only one value left in list two</p><p>but it’s not</p><p>always going to be the case right maybe</p><p>there could be a bunch of other values</p><p>right four five six there could be other</p><p>values</p><p>in list 2. now what would we do in this</p><p>case well we can</p><p>do a really easy thing which is just</p><p>take the remaining</p><p>portion of the list so if we</p><p>run out so if one of the lists is empty</p><p>of course</p><p>the the list two in this case is still</p><p>sorted so we can literally just take</p><p>that list</p><p>insert it into the end of our result</p><p>right</p><p>so that’s basically the idea okay now</p><p>let’s write the code so remember</p><p>i like and most people like to use this</p><p>technique of creating a dummy node</p><p>so you don’t have to worry about the</p><p>edge case of inserting into an empty</p><p>list</p><p>the tail of our list is initially</p><p>i’m just going to say you know the dummy</p><p>so</p><p>now we’re going to keep going we’re</p><p>going to iterate through these two lists</p><p>what’s the condition that we’re going to</p><p>do that basically</p><p>if both of them are non-empty right</p><p>because that’s</p><p>when we can actually compare the two</p><p>values so while list one and</p><p>list two are non-null so now we can do</p><p>our comparison</p><p>so if the value of list one</p><p>is less than the value of list2</p><p>then of course we’re going to take the</p><p>list1 value and insert it into</p><p>our tail so tail dot</p><p>next is going to be the node itself</p><p>right list one node</p><p>and then we can of course update our</p><p>list one pointer</p><p>now the else case is if list two</p><p>is less than or equal right so if they</p><p>were equal the else condition would</p><p>evaluate so we’re going to do the exact</p><p>same thing except</p><p>list two is going to be inserted</p><p>and don’t forget we do have to update</p><p>our tail pointer but the tail pointer is</p><p>going to be updated regardless of which</p><p>node we insert into our list so that’s</p><p>why i’m not putting it in either of the</p><p>conditionals</p><p>and you might be tempted to just say</p><p>return</p><p>dummy.next return the list but</p><p>don’t forget our condition was list one</p><p>and list two are non-null what if one of</p><p>them</p><p>is empty but the other one isn’t right</p><p>now well in that case we want to find</p><p>the non-empty list</p><p>and then insert it at the end of our</p><p>result so if</p><p>l1 is not null then we’ll say tail</p><p>dot next is equal to l1 so we’re just</p><p>taking that remaining portion of l1</p><p>and inserting it into the end of the</p><p>list</p><p>else if l2 is non-null we would do the</p><p>exact same thing</p><p>with l2 uh only one of them can be</p><p>non-null so let me just run it to prove</p><p>to myself that it still works</p><p>and yep it does and some random</p><p>percentages that always seem to change</p><p>right now it’s 65</p><p>but i’m sure if i submit it again it</p><p>could be 10 it could be 99</p><p>i don’t know why leak code is so</p><p>inconsistent with this</p><p>but that’s besides the point if this was</p><p>helpful please leave a like and</p><p>subscribe</p><p>and thank you for watching and feel free</p><p>to suggest any other problems that you</p><p>would like to see solved</p>]]></content>
    
    
    
    <tags>
      
      <tag>Subtitle</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
